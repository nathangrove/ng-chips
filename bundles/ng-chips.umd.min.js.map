{"version":3,"sources":["ng://ng-chips/lib/chips.component.ts","ng://ng-chips/lib/focus-on-init.directive.ts","ng://ng-chips/lib/chips.module.ts"],"names":["ChipsComponent","ref","_iterableDiffers","this","EventEmitter","iterableDiffer","find","create","prototype","ngOnInit","add","option","value","push","keepopen","getOptions","length","openSelector","optionsPointer","onChange","next","remove","_this","filter","v","valueKey","self","options","o","map","indexOf","searchString","displayKey","toLowerCase","toggleSelector","selectorOpen","multiple","closeSelector","search","event","target","detectChanges","setTimeout","ngDoCheck","diff","proposed","idx","m","Component","args","selector","template","styles","host","(document:click)","ChangeDetectorRef","IterableDiffers","Input","Output","FocusOnInitDirective","renderer","elementRef","instances","ngAfterViewInit","splice","every","i","priority","invokeElementMethod","nativeElement","Directive","Renderer","ElementRef","ChipsModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Component, ChangeDetectorRef, IterableDiffers, Input, Output, EventEmitter, AfterViewInit, ViewEncapsulation } from '@angular/core';\n\n\n@Component({\n  selector: 'ng-chips',\n  template: `\n  <div id=\"ng-chips-wrapper\" (click)=\"toggleSelector()\">\n  \n    <div class=\"placeholder\" *ngIf=\"!value.length\">{{ emptyState }}</div>\n    \n      <div *ngFor=\"let chip of value\" class=\"chipit\">\n        <div [ngClass]=\"{'disabled': disabled, 'value': true}\">{{ chip[displayKey] }}</div>\n        <div class=\"remove\" *ngIf=\"!disabled\" (click)=\"remove(chip)\">x</div>\n      </div>\n    \n      <div class=\"addition\" *ngIf=\"value.length && getOptions().length && !disabled && multiple\">{{ placeholder }}</div>\n    \n      <div class=\"clearfix\"></div>\n    </div>\n  \n    <div id=\"ng-chips-selector\" class=\"rounded\" *ngIf=\"selectorOpen\">\n      <input type=\"text\" (keyup)=\"search($event)\" class='search' placeholder=\"Search\" focusOnInit />\n    <div *ngFor=\"let option of getOptions()\" (click)=\"add(option)\" [ngClass]=\"{'option': true, 'focused': getOptions()[optionsPointer] == option }\">{{ option[displayKey] }}</div>\n  </div>\n  `,\n  styles: [`#ng-chips-wrapper{position:relative;line-height:1;min-height:50px;cursor:pointer;border:1px solid #d2d2d2;padding:5px;border-radius:2px}#ng-chips-wrapper .placeholder{float:left;color:grey;font-size:20px;margin-left:5px}#ng-chips-wrapper .chipit{float:left;background-color:#d6d6d6;border-radius:1000px;margin:3px;font-size:13px;height:32px;padding-left:12px}#ng-chips-wrapper .chipit .value{float:left;margin-right:4px;margin-top:9px}#ng-chips-wrapper .chipit .value.disabled{margin-right:12px}#ng-chips-wrapper .chipit .remove{text-align:center;float:left;background-color:#bdbdbd;color:#fff;border-radius:50%;width:24px;height:24px;margin:4px;padding-top:2px;font-size:18px}#ng-chips-wrapper .chipit:hover{background-color:#888;color:#fff}#ng-chips-wrapper .chipit:hover .remove{background-color:#fff;color:#888}#ng-chips-wrapper .addition{float:left;margin-top:12px;color:grey;font-size:13px}#ng-chips-wrapper .clearfix:after{visibility:hidden;display:block;font-size:0;content:\" \";clear:both;height:0}#ng-chips-wrapper * html .clearfix{zoom:1}#ng-chips-selector{background-color:#fff;z-index:1000;position:absolute;border:1px solid #c9c9c9;padding:3px;min-width:300px;max-height:200px;overflow-y:scroll;overflow-x:hidden}#ng-chips-selector .search{width:90%;margin:5px;border-width:0 0 1px;border-style:solid;border-color:#c9c9c9;outline:0;box-shadow:none!important}#ng-chips-selector .option{padding:3px}#ng-chips-selector .option .focused,#ng-chips-selector .option:hover{background-color:#d3d3d3}#ng-chips-selector .rounded{border-radius:5px}`],\n  host: {\n    '(document:click)': 'closeSelector()',\n  }\n})\n\nexport class ChipsComponent {\n  \n  selectorOpen: boolean = false;\n  searchString: string = '';\n  \n  // default value\n  @Input() value: any[] = [];\n  \n  // is it disabled or \"readonly\"\n  @Input() disabled: boolean = false;\n  \n  // available options\n  @Input() options: any[] = [];\n  \n  // placeholder text on empty state\n  @Input() emptyState: string = 'Select Tag';\n  \n  // the tag to add another\n  @Input() placeholder: string = '+ Tag';\n  \n  // keep open to allow multiple to be selected?\n  @Input() keepopen: boolean = false;\n  \n  // allow multiple options\n  @Input() multiple: boolean = false;\n  \n  @Input() displayKey: string = 'display';\n  @Input() valueKey: string = 'value';\n  \n  // emitter to emit a change...\n  @Output() onChange = new EventEmitter<any[]>();\n  \n  iterableDiffer: any;\n  \n  optionsPointer: number = -1;\n  \n  constructor(\n    private ref: ChangeDetectorRef,\n    private _iterableDiffers: IterableDiffers\n  ) { \n    this.iterableDiffer = this._iterableDiffers.find([]).create(null);\n  }\n  \n  ngOnInit(){\n    let self = this;\n    /*\n    document.onkeydown = function(event){\n      if (event.keyCode == 38){ // up\n        self.optionsPointer--;\n      } else if (event.keyCode == 40) { // down\n        self.optionsPointer++;\n      }\n    }\n    */\n  }\n  \n  \n  add(option: any){\n    this.value.push(option);\n    if (this.keepopen && this.getOptions().length) this.openSelector();\n    this.optionsPointer = -1;\n    this.onChange.next(this.value);\n  }\n  \n  remove(option: any){\n    this.value = this.value.filter( v => v[this.valueKey] != option[this.valueKey] );\n    this.onChange.next(this.value);\n  }\n  \n  getOptions(){\n    let self = this;\n    if (!this.value) this.value = [];\n    return this.options.filter( o => this.value.map( v => v[this.valueKey] ).indexOf(o[this.valueKey]) == -1 ).filter( o => self.searchString == '' || o[this.displayKey].toLowerCase().indexOf( self.searchString.toLowerCase()) > -1);\n  }\n  \n  toggleSelector(){\n    if (!this.selectorOpen && this.value.length && !this.multiple) return;\n    if (this.selectorOpen) this.closeSelector();\n    else this.openSelector();\n  }\n  \n  search(event?){\n    this.searchString = event.target.value;\n    this.ref.detectChanges();\n  }\n  \n  openSelector(){\n    let self = this;\n    setTimeout(() => {\n      self.selectorOpen = true;\n    },100)\n  }\n  \n  closeSelector(){\n    if (!this.selectorOpen) return;\n    this.selectorOpen = false;\n    this.searchString = '';\n    this.ref.detectChanges();\n  }\n  \n  ngDoCheck() {\n    if (!this.value) return;\n    let changes = this.iterableDiffer.diff(this.value);\n    if (changes) {\n      let proposed = this.value.filter( (v,idx,self) => self.map( m => m[this.valueKey]).indexOf(v[this.valueKey]) === idx );\n      if (this.value.length !== proposed.length) this.value = proposed;\n    }\n  }\n  \n}\n","import {Directive, Renderer, ElementRef, OnInit, AfterViewInit, Input} from '@angular/core';\n\n@Directive({\n  selector: '[focusOnInit]'\n})\nexport class FocusOnInitDirective implements OnInit, AfterViewInit {\n  @Input('focusOnInit') priority: number = 0;\n\n  static instances: FocusOnInitDirective[] = [];\n\n  constructor(public renderer: Renderer, public elementRef: ElementRef) {\n  }\n\n  ngOnInit(): void {\n    FocusOnInitDirective.instances.push(this)\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => {\n      FocusOnInitDirective.instances.splice(FocusOnInitDirective.instances.indexOf(this), 1);\n    });\n\n    if (FocusOnInitDirective.instances.every((i) => this.priority >= i.priority)) {\n      this.renderer.invokeElementMethod(\n        this.elementRef.nativeElement, 'focus', []);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ChipsComponent } from './chips.component';\nimport { FocusOnInitDirective } from './focus-on-init.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    ChipsComponent,\n    FocusOnInitDirective\n  ],\n  exports: [ChipsComponent]\n})\nexport class ChipsModule { }\n"]}